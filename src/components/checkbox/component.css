:host {
  display: inline-flex;
  position: relative;
  vertical-align: top;
  cursor: pointer;
  outline: none;
  border-radius: 2px;
  -webkit-tap-highlight-color: transparent;

  margin: 9px 0;
}

:host(.full-width) {
  flex-grow: 1;
}

:host([disabled]) {
  pointer-events: none;
  cursor: default;
}

input {
  appearance: none;
  height: 48px;
  width: 48px;
  margin: 0;
  opacity: 0;
  outline: none;
  position: absolute;
  z-index: 1;
  cursor: inherit;
}


.container {
  border-radius: inherit;
  display: flex;
  height: 18px;
  min-width: 18px;
  place-content: center;
  place-items: center;
  position: relative;
}

.outline,
.background,
.icon,
.state-layer {
  inset: 0;
  position: absolute;
}

.outline,
.background {
  border-radius: inherit;
}


.state-layer {
  pointer-events: none;
  opacity: 0;
  border-radius: 50%;
  background-color: var(--mdw-on-surface);
  width: 40px;
  height: 40px;
  left: -11px;
  top: -11px;
  transition: opacity;
  transition-duration: 150ms;
}

:host(.selected) .state-layer {
  background-color: var(--mdw-primary);
}

:host(.invalid) .state-layer {
  background-color: var(--mdw-error);
}

:host(:focus) .state-layer {
  opacity: var(--mdw-state-layer-opacity-focus);
}

@media (hover: hover) {
  :host(:hover) .state-layer {
    opacity: var(--mdw-state-layer-opacity-hover);
  }
}

.outline {
  border-color: var(--mdw-on-surface-variant);
  border-style: solid;
  border-width: 2px;
  box-sizing: border-box;
}
:host(.selected) .outline {
  border-width: 0px;
}
:host(.invalid) .outline {
  border-color: var(--mdw-error);
}

:host([disabled]) .outline {
  border-color: var(--mdw-on-surface);
  opacity: 0.38;
}

.background {
  background-color: var(--mdw-primary);
}

.background,
.icon {
  opacity: 0;
  transition-duration: var(--mdw-motion-duration-short3), var(--mdw-motion-duration-short1);
  transition-property: transform, opacity;
  transition-timing-function: var(--mdw-motion-easing-emphasized-accelerate), linear;
  transform: scale(0.6);
}

:host(.selected) :is(.background, .icon) {
  opacity: 1;
  transition-duration: var(--mdw-motion-duration-medium2), var(--mdw-motion-duration-short1);
  transition-timing-function: var(--mdw-motion-easing-emphasized-decelerate), linear;
  transform: scale(1);
}

:host([disabled].selected) .background {
  background-color: var(--mdw-on-surface);
  opacity: 0.38;
}

.icon {
  fill: var(--mdw-on-primary);
  height: 18px;
  width: 18px;
}
:host([disabled].selected) .icon {
  fill: var(--mdw-surface);
  /* opacity: 0.38; */
  opacity: 0.6;
}

.mark.short {
  height: 2px;
  transition-property: transform, height;
  width: 2.2px;
}

.mark.long {
  height: 2.2px;
  transition-property: transform, width;
  width: 10px;
}

.mark {
  transition-duration: var(--mdw-motion-duration-short3);
  transition-timing-function: var(--mdw-motion-easing-emphasized-accelerate)
}

:host(.selected) .mark {
  transition-duration: var(--mdw-motion-duration-medium2);
  transition-timing-function: var(--mdw-motion-easing-emphasized-decelerate)
}

:host(.indeterminate) .mark {
  transform: scaleY(-1) translate(4px, -10px) rotate(0deg);
}

:host(.checked) .mark {
  transform: scaleY(-1) translate(7px, -14px) rotate(45deg);
}

:host(.checked) .mark.short {
  height: 5px;
}

:host(.checked) .mark.long {
  width: 11px;
}



.label.has-label {
  display: inline-flex;
  flex: 1;
  flex-grow: inherit;
  justify-content: flex-end;
  user-select: none;
  cursor: inherit;
  white-space: nowrap;
  margin-left: 16px;

  font-size: var(--mdw-font-large-label-size);
  font-weight: var(--mdw-font-large-label-weight);
  line-height: var(--mdw-font-large-label-line-height);
  letter-spacing: var(--mdw-font-large-label-tracking);
}

:host(.label-left) .label.has-label {
  order: -1;
  justify-content: flex-start;
  margin-left: unset;
  margin-right: 16px;
}

:host(.invalid) .label.has-label {
  color: var(--mdw-error);
}

:host([disabled]) .label.has-label {
  color: var(--mdw-on-surface);
  opacity: 0.38;
}

:host(.invalid) .background {
  background-color: var(--mdw-error);
}


/* --- Ripple --- */

.ripple {
  border-radius: inherit;
  position: absolute;
  width: 24px;
  height: 24px;
  pointer-events: none;
}

.ripple .mdw-ripple-element {
  background-color: var(--mdw-on-surface);
  opacity: var(--mdw-state-layer-opacity-pressed);
}


@media (forced-colors: active) {
  .background {
    background-color: CanvasText;
  }

  :host(.selected[disabled]) .background {
    background-color: GrayText;
    opacity: 1;
  }

  .outline {
    border-color: CanvasText;
  }

  :host([disabled]) .outline {
    border-color: GrayText;
    opacity: 1;
  }

  .icon {
    fill: Canvas;
  }
}
